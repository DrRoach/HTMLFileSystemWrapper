{
  "name": "HTML File System Wrapper",
  "tagline": "A simple wrapper written so that working with the HTML file system is easier.",
  "body": "HTML 5 File System Wrapper\r\n===\r\n\r\nThis wrapper is to make developers lives' easier.\r\n\r\n[GitHub io page](http://drroach.github.io/HTMLFileSystemWrapper/)\r\n\r\nA simple wrapper that I created so that it is easier to use the HTML file system. The HTML API for the file system \r\nis awkward, confusing and badly documented. This wrapper enables you to start writing to files on the clients machine \r\nin just two lines of code.\r\n\r\n##Getting Started\r\nJust include the `FileSystem.js` file in your project and have instant access to the `FileSystem` object.\r\n\r\nExample:\r\n\r\n```JS\r\n<script src=\"FileSystem.js\"></script>\r\n...\r\n<script>\r\nvar fs = new FileSystem(50*1024*1024 /*5MB*/, FileSystem.PERSISTENT);\r\n</script>\r\n```\r\n\r\n###Basic Usage\r\n\r\nCreate a new file:\r\n\r\n```JS\r\nvar fs = new FileSystem(500*1024*1024 /*50MB*/, FileSystem.TEMPORARY);\r\nfs.create(\"newFile.json\");\r\n```\r\n\r\n###\"Advanced\" Usage\r\n\r\nStoring JSON in a file:\r\n\r\n```JS\r\nfs.write(\"data.json\", JSON.stringify({\r\n    name: \"Ryan\",\r\n    age: 20,\r\n    occupation: \"Student\"\r\n}));\r\n```\r\n\r\nReading from a file (using previous file example):\r\n\r\n```JS\r\nfs.read(\"data.json\", function(r) {\r\n    r = JSON.parse(r);\r\n    console.log(r.name); //Ryan\r\n    console.log(r.age); //20\r\n    console.log(r.occupation); //Student\r\n});\r\n```\r\n\r\n####Methods\r\n\r\n#####FileSystem\r\n\r\n```JS\r\nFileSystem(size, storageType)\r\n```\r\n\r\nThe constructor that's called when requesting a file system. The size is the \r\nrequested size of the virtual file system in bytes. The storage type can be one of two: `FileSystem.PERSISTENT` or \r\n`FileSystem.TEMPORARY`.\r\n\r\n#####create\r\n\r\n```JS\r\ncreate(filename)\r\n```\r\n\r\nCreate a file. Pass a desired name as a string.\r\n\r\n#####write\r\n\r\n```JS\r\nwrite(filename, text, position, createFile)\r\n```\r\n\r\nWrite text to a file. The filename that you give is the file that will \r\nbe written to. If it doesn't exist, and createFile is true (default), then the file will be created. The `text` variable \r\nis pretty self explanatory. The position is where in the file you want to start writing. Two possibilities are: \r\n`FileSystem.START` and `FileSystem.END`.\r\n\r\n#####remove\r\n\r\n```JS\r\nremove(filename)\r\n```\r\n\r\nDelete a file. Pass the files' name as a string.\r\n\r\n#####read\r\n\r\n```JS\r\nread(filename, callback)\r\n```\r\n\r\nRead the text from a given file and then run the callback. The only parameter passed to the \r\ncallback is the contents of the file.\r\n\r\n###Notes\r\nBecause this project is in alpha, there is a very strong chance that backwards compatibility may not always be a forethought. \r\nI'm sorry about this, but as soon as a BETA tag is added, this problem will become obsolete.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}